apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.test"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions "versionCode"
        flavorDimensions "versionName"
        manifestPlaceholders = [
                app_icon: "@mipmap/ic_launcher",
                app_name: "@string/app_name",
        ]
    }
    productFlavors {
        china {
            applicationId "com.example.china"
            manifestPlaceholders = [
                    app_icon: "@mipmap/ic_launcher",
                    app_name: "中国版",
            ]
        }
        america {
            applicationId "com.example.america"
            manifestPlaceholders = [
                    app_icon: "@mipmap/ic_launcher",
                    app_name: "美国版",
            ]
        }
        free {
            applicationId "com.lqr.demo.free1"
            versionName "1.2.3"
            manifestPlaceholders = [
                    app_icon: "@mipmap/icon_no_baggage_data",
                    app_name: "免费版",
            ]

        }
    }
    buildTypes {
        // 多渠道相关设置
        release {
            buildConfigField("boolean", "LOG_DISPLAY ", "false")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                buildConfigField("String", "PROUDCT", "\"newapp\"")
                buildConfigField("String[]", "DNSS", "{\"http://119.29.29.29\",\"http://8.8.8.8\",\"http://114.114.114.114\"}")
                if (variant.flavorName == 'china') {
                    buildConfigField("String", "DNS", "\"http://119.29.29.29\"")
                } else if (variant.flavorName == 'america') {
                    buildConfigField("String", "DNS", "\"http://8.8.8.8\"")
                } else if (variant.flavorName == 'free') {
                    buildConfigField("String", "DNS", '"http://114.114.114.114"')
                }
            }
        }
        debug {
            buildConfigField("boolean", "LOG_DISPLAY ", "true")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                buildConfigField("String", "PROUDCT", "\"newapp\"")
                buildConfigField("String[]", "DNSS", "{\"http://119.29.29.29\",\"http://8.8.8.8\",\"http://114.114.114.114\"}")
                if (variant.flavorName == 'china') {
                    buildConfigField("String", "DNS", "\"http://119.29.29.29\"")
                } else if (variant.flavorName == 'america') {
                    buildConfigField("String", "DNS", "\"http://8.8.8.8\"")
                } else if (variant.flavorName == 'free') {
                    buildConfigField("String", "DNS", '"http://114.114.114.117"')
                }

            }
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

}

dependencies {
    def lifecycle_version = "2.0.0"
    def dagger_version = "2.22.1"
    def retrofit_version = "2.5.0"
    def glide_version = '4.9.0'
    def room_version = "2.1.0-alpha07"
    def nav_version = "2.1.0-alpha02"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation 'com.squareup.retrofit2:converter-gson:2.0.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    // qmui
    implementation 'com.qmuiteam:qmui:1.2.0'
    implementation 'com.qmuiteam:arch:0.3.1'
    // 屏幕适配框架
    implementation 'me.jessyan:autosize:1.1.2'
    //Room
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    //权限控制
    implementation 'pub.devrel:easypermissions:3.0.0'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0-alpha04'
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    // alternatively - just ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    // For Kotlin use lifecycle-viewmodel-ktx
    // alternatively - just LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI
    //     AndroidX libraries use this lightweight import for Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"

    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // For Kotlin use kapt instead of annotationProcessor
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.zxing:core:3.3.2'
    implementation 'com.google.zxing:core:3.3.2'
}
